generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int          @id @default(autoincrement())
  avatar           String?
  name             String?
  email            String?      @unique
  role             UserRole?
  description      String?
  links            Json?
  metadata         Json?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  walletAddress    String
  ownedGrantsPools GrantsPool[] @relation("UserGrantsPools")
  pods             Pod[]        @relation("UserPods")

  @@index([email])
  @@index([role])
  @@index([walletAddress])
}

model GrantsPool {
  id               Int              @id @default(autoincrement())
  avatar           String?
  name             String
  description      String
  links            Json?
  tags             String?
  modInfo          Json
  treasuryWallet   String
  treasuryBalances Json?
  chainType        ChainType
  status           GrantsPoolStatus @default(ACTIVE)
  metadata         Json?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  ownerId          Int
  owner            User             @relation("UserGrantsPools", fields: [ownerId], references: [id])
  pods             Pod[]            @relation("GrantsPoolPods")
  rfps             Rfps[]

  @@index([name])
  @@index([chainType])
  @@index([status])
  @@index([ownerId])
  @@index([treasuryWallet])
}

model Rfps {
  id           Int        @id @default(autoincrement())
  grantsPoolId Int
  title        String
  description  String
  metadata     Json?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  grantsPool   GrantsPool @relation(fields: [grantsPoolId], references: [id], onDelete: Cascade)

  @@index([grantsPoolId])
}

model Pod {
  id                Int         @id @default(autoincrement())
  applicantId       Int
  grantsPoolId      Int
  rfpIndex          Int
  avatar            String?
  name              String
  shortDescription  String
  detailDescription String
  links             Json?
  currency          String
  status            PodStatus   @default(REVIEWING)
  metadata          Json?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  milestones        Milestone[] @relation("PodMilestones")
  applicant         User        @relation("UserPods", fields: [applicantId], references: [id])
  grantsPool        GrantsPool  @relation("GrantsPoolPods", fields: [grantsPoolId], references: [id])

  @@index([applicantId])
  @@index([grantsPoolId])
  @@index([status])
  @@index([name])
}

model Milestone {
  id               Int             @id @default(autoincrement())
  podId            Int
  milestoneData    Json
  associatedWallet String?
  status           MilestoneStatus @default(ACTIVE)
  currentPhase     String          @default("PENDING")
  deliveryInfo     Json?
  metadata         Json?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  pod              Pod             @relation("PodMilestones", fields: [podId], references: [id], onDelete: Cascade)

  @@index([podId])
  @@index([status])
  @@index([associatedWallet])
  @@index([currentPhase])
}

enum UserRole {
  ADMIN
  GP_MOD
  APPLICANT
  VIEWER
}

enum ChainType {
  ETHEREUM
  OPTIMISM
}

enum GrantsPoolStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum PodStatus {
  REVIEWING
  APPROVED
  REJECTED
  IN_PROGRESS
  COMPLETED
  TERMINATED
}

enum MilestoneStatus {
  ACTIVE
  INACTIVE
}
