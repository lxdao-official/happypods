generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int            @id @default(autoincrement())
  avatar                String?
  name                  String?
  email                 String?        @unique
  role                  UserRole?
  description           String?
  links                 Json?
  metadata              Json?          @default("{}")
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  walletAddress         String
  ownedGrantsPools      GrantsPool[]   @relation("UserGrantsPools")
  pods                  Pod[]          @relation("UserPods")
  sentNotifications     Notification[] @relation("SentNotifications")
  receivedNotifications Notification[] @relation("ReceivedNotifications")

  @@index([email])
  @@index([role])
  @@index([walletAddress])
}

model GrantsPool {
  id               Int              @id @default(autoincrement())
  avatar           String?
  name             String
  description      String
  links            Json?
  tags             String?
  modInfo          Json
  treasuryWallet   String
  treasuryBalances Json?            @default("{\"USDC\": {\"available\": \"0\", \"used\": \"0\", \"locked\": \"0\"}}") //{"USDC": {"available": "10000", "used": "0", "locked": "0"},"USDT": {"available": "0", "used": "0", "locked": "0"}}
  chainType        ChainType
  status           GrantsPoolStatus @default(ACTIVE)
  metadata         Json?            @default("{}")
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  ownerId          Int
  owner            User             @relation("UserGrantsPools", fields: [ownerId], references: [id])
  pods             Pod[]            @relation("GrantsPoolPods")
  rfps             Rfps[]

  @@index([name])
  @@index([chainType])
  @@index([status])
  @@index([ownerId])
  @@index([treasuryWallet])
}

model Rfps {
  id           Int        @id @default(autoincrement())
  grantsPoolId Int
  title        String
  description  String
  metadata     Json?      @default("{}")
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  inactiveTime DateTime?
  grantsPool   GrantsPool @relation(fields: [grantsPoolId], references: [id], onDelete: Cascade)
  pods         Pod[]      @relation("RfpPods")

  @@index([grantsPoolId])
}

model Pod {
  id               Int         @id @default(autoincrement())
  podGroupId       Int         @unique @default(autoincrement()) // 使用自增 ID 作为唯一标识
  applicantId      Int
  grantsPoolId     Int
  rfpId            Int
  walletAddress    String
  avatar           String?
  title            String
  description      String
  links            Json?
  tags             String?
  treasuryBalances String?     @default("0")
  currency         String
  status           PodStatus   @default(REVIEWING)
  metadata         Json?       @default("{}") // {rejectReason: string}
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  approvedAt       DateTime?
  inactiveTime     DateTime? // 失效时间，null 表示当前活跃版本
  milestones       Milestone[] @relation("PodMilestones")
  applicant        User        @relation("UserPods", fields: [applicantId], references: [id])
  grantsPool       GrantsPool  @relation("GrantsPoolPods", fields: [grantsPoolId], references: [id])
  rfp              Rfps        @relation("RfpPods", fields: [rfpId], references: [id])

  @@index([applicantId])
  @@index([grantsPoolId])
  @@index([rfpId])
  @@index([status])
  @@index([podGroupId])
  @@index([inactiveTime])
}

model Milestone {
  id           Int             @id @default(autoincrement())
  podId        Int
  title        String
  description  String
  amount       Int
  deadline     DateTime
  status       MilestoneStatus @default(ACTIVE)
  currentPhase String          @default("PENDING")
  deliveryInfo Json[]          // [{content: string, links: string[], deadline: string}]
  metadata     Json?           @default("{}") // {rejectReason: string}
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  pod          Pod             @relation("PodMilestones", fields: [podId], references: [id], onDelete: Cascade)

  @@index([podId])
  @@index([status])
  @@index([currentPhase])
}

enum UserRole {
  ADMIN
  GP_MOD
  APPLICANT
  VIEWER
}

enum ChainType {
  ETHEREUM
  OPTIMISM
}

enum GrantsPoolStatus {
  ACTIVE
  INACTIVE
}

enum PodStatus {
  REVIEWING // 审核中
  APPROVED // 批准
  PENDING_PAYMENT // 待支付
  REJECTED // 拒绝
  IN_PROGRESS // 进行中
  COMPLETED // 完成
  TERMINATED // 终止失败
}

enum MilestoneStatus {
  ACTIVE // 有效
  INACTIVE // 失效
  COMPLETED // 完成
  REJECTED // 拒绝
  APPROVED // 批准
  REVIEWING // 审核中
  PENDING_DELIVERY // 待交付
  PENDING_PAYMENT // 待支付
}

model Notification {
  id         Int              @id @default(autoincrement())
  type       NotificationType @default(GENERAL)
  senderId   Int
  receiverId Int
  params     Json?
  title      String
  content    String
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  metadata   Json?
  read       Boolean          @default(false)
  sender     User             @relation("SentNotifications", fields: [senderId], references: [id])
  receiver   User             @relation("ReceivedNotifications", fields: [receiverId], references: [id])

  @@index([senderId])
  @@index([receiverId])
}

enum NotificationType {
  GENERAL // 通用
  POD_REVIEW // 项目审核
  MILESTONE_REVIEW // 里程碑审核
  MILESTONE_DELIVERY_SUBMIT // 里程碑交付提交
  MILESTONE_CHANGE_REVIEW // 里程碑变更审核
}


// 交易记录表
model Transaction {
  id Int @id @default(autoincrement())
  type TransactionType
  amount Int
  createdAt DateTime @default(now())
  txHash String
  metadata Json?
  fromAddress String
  toAddress String
  currency String
}

enum TransactionType {
  MILESTONE_PAYMENT // milestone 支付
  POD_ACTIVATION_PAYMENT // pod激活支付
  OTHER // 其他
}